package org.jcramb.stackrefresh.book.repository.impl;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.jcramb.stackrefresh.book.model.BookModel;
import org.jcramb.stackrefresh.book.repository.BookRepositoryCustom;
import org.springframework.stereotype.Repository;


/**
 * Implementation of the custom interface that provides operations that aren't generated by spring-data-jpa by default.
 * 
 * @author Jamie Cramb
 */
@Repository
public class BookRepositoryCustomImpl implements BookRepositoryCustom {

    private EntityManager entityManager;

    public BookRepositoryCustomImpl() {
    }

    @PersistenceContext
    private void setEntityManager(EntityManager entityManager) {
        this.entityManager = entityManager;
    }

    @Override
    public List<BookModel> getBooksByNameAndAuthorContains(String nameContains, String authorContains) {
        TypedQuery<BookModel> query = entityManager.createQuery("FROM BookModel WHERE name LIKE '%" + nameContains
                + "%' AND author LIKE '%" + authorContains + "%'", BookModel.class);

        List<BookModel> results = query.getResultList();

        return results;
    }
}